diff --git a/libvo/vo_vaapi.c b/libvo/vo_vaapi.c
index 6e2dd79..85f700a 100644
--- a/libvo/vo_vaapi.c
+++ b/libvo/vo_vaapi.c
@@ -149,6 +149,8 @@ struct vaapi_equalizer {
     VADisplayAttribute saturation;
 };
 
+VADisplayAttribute rendermode;
+
 static int                      g_is_visible;
 static int                      g_is_paused;
 static uint32_t                 g_image_width;
@@ -163,6 +165,7 @@ static int                      g_deint;
 static int                      g_deint_type;
 static int                      g_colorspace;
 static unsigned int             g_scaling;
+static unsigned int             g_render;
 
 static int                      gl_enabled;
 static int                      gl_use_tfp;
@@ -991,6 +994,27 @@ static int int_012(int *n)
     return *n >= 0 && *n <= 2;
 }
 
+static strarg_t g_render_arg = { 0, NULL };
+
+static int test_render_arg(void *arg)
+{
+    strarg_t * const strarg = arg;
+
+    return (strargcmp(strarg, "default") == 0 ||
+            strargcmp(strarg, "overlay") == 0 ||
+            strargcmp(strarg, "texture") == 0);
+}
+
+static void setup_render(const char *render)
+{
+    if (strcmp(render, "default") == 0)
+        g_render = 0;
+    else if (strcmp(render, "overlay") == 0)
+        g_render = 1;
+    else if (strcmp(render, "texture") == 0)
+        g_render = 2;
+}
+
 #if USE_VAAPI_SCALING
 static strarg_t g_scaling_arg = { 0, NULL };
 
@@ -1020,6 +1044,7 @@ static const opt_t subopts[] = {
     { "dm",          OPT_ARG_INT,  &va_dm,        (opt_test_f)int_012 },
     { "stats",       OPT_ARG_BOOL, &cpu_stats,    NULL },
     { "deint",       OPT_ARG_INT,  &g_deint,      (opt_test_f)int_012 },
+    { "render",      OPT_ARG_STR,  &g_render_arg, test_render_arg },
 #if USE_VAAPI_COLORSPACE
     { "colorspace",  OPT_ARG_INT,  &g_colorspace, (opt_test_f)int_012 },
 #endif
@@ -1067,6 +1092,10 @@ static int preinit(const char *arg)
                "    0: no deinterlacing (default)\n"
                "    1: only show first field\n"
                "    2: bob deinterlacing\n"
+               "  render (render modes)\n"
+               "    default: use default rendering method\n"
+               "    overlay: use display overlay to render\n"
+               "    texture: use gpu texture engine to render\n"
 #if USE_VAAPI_COLORSPACE
                "  colorspace\n"
                "    0: guess based on video resolution\n"
@@ -1224,6 +1253,16 @@ static int preinit(const char *arg)
                 case VADisplayAttribSaturation:
                     attr = &va_equalizer.saturation;
                     break;
+                case VADisplayAttribRenderMode:
+                    if (g_render_arg.str && (display_attrs[i].flags & VA_DISPLAY_ATTRIB_SETTABLE)) {
+                        mp_msg(MSGT_VO, MSGL_INFO, "[vo_vaapi] Using '%s' rendering\n", g_render_arg.str);
+                        setup_render(g_render_arg.str);
+                        rendermode = display_attrs[i];
+			rendermode.value = g_render;
+                        status = vaSetDisplayAttributes(va_context->display, &rendermode, 1);
+                        check_status(status, "vaSetDisplayAttributes() RenderMode");
+                    }
+                    break;
                 default:
                     attr = NULL;
                     break;
